sonata_media:
    #admin:
        #media:
            #class: App\Application\Sonata\MediaBundle\Admin\MediaAdmin

    class:
        media: App\Application\Sonata\MediaBundle\Entity\Media
        gallery: App\Application\Sonata\MediaBundle\Entity\Gallery
        gallery_has_media: App\Application\Sonata\MediaBundle\Entity\GalleryHasMedia

    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr it is mandatory to choose one here

    default_context: padrao
    admin_format: { width: 100 , quality: 90, format: 'jpg' }
    contexts:
        padrao: ################
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http

            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.vimeo

            formats:
                icon: { width: 50, quality: 70 }
                small: { width: 100 , quality: 70 }
                #medium: { width: 250 , quality: 70 }
                #big: { width: 500 , quality: 70 }

        icons: ################
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http

            providers:

                - sonata.media.provider.image

            formats:
                icon: { width: 50, quality: 80 }
                very_small: { width: 100 , quality: 80 }
                small: { width: 250 , quality: 80 }

        arquivos_documento: ################
            download:
                strategy: sonata.media.security.superadmin_strategy
                mode: http

            providers:
                - sonata.media.provider.file

    cdn:
        server:
            #path:  "%kernel.project_dir%/public/upload/media" # http://media.sonata-project.org
            path:  "/upload/media" # http://media.sonata-project.org

        panther:
            path: # http://domain.pantherportal.com/uploads/media
            site_id:
            password:
            username:

        cloudfront:
            path: # http://xxxxxxxxxxxxxx.cloudfront.net/uploads/media
            distribution_id:
            key:
            secret:
            region:
            version:

        fallback:
            master: sonata.media.cdn.panther
            fallback: sonata.media.cdn.server


    filesystem:
        local:
            # Directory for upload should be writable
            directory: "%kernel.project_dir%/public/upload/media"
            create: false

        ftp:
            directory:
            host:
            username:
            password:
            port: 21
            passive: false
            create: false
            mode: 2 # this is the FTP_BINARY constant. see: http://php.net/manual/en/ftp.constants.php

        s3:
            bucket:
            accessKey:
            secretKey:
            create: false
            region: s3.amazonaws.com # change if not using US Standard region
            version: 2006-03-01 # change according the API version you are using
            storage: standard # can be one of: standard or reduced
            acl: public # can be one of: public, private, open, auth_read, owner_read, owner_full_control
            encryption: aes256 # can be aes256 or not set
            cache_control: max-age=86400 # or any other
            meta:
                key1: value1 #any amount of metas(sent as x-amz-meta-key1 = value1)

        mogilefs:
            hosts: [ ]
            domain:

        replicate:
            master: sonata.media.adapter.filesystem.s3
            slave: sonata.media.adapter.filesystem.local

        rackspace:
            url:
            secret:
                username:
                apiKey:
            region:
            containerName: media
            create_container: false

        openstack:
            url:
            secret:
                username:
                password:
            region:
            containerName: media
            create_container: false

    providers:
        file:
            service: sonata.media.provider.file
            resizer: false
            filesystem: sonata.media.filesystem.local
            cdn: sonata.media.cdn.server
            generator: sonata.media.generator.default
            thumbnail: sonata.media.thumbnail.format
            allowed_extensions: [ 'pdf', 'txt', 'rtf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pttx', 'odt', 'odg', 'odp', 'ods', 'odc', 'odf', 'odb', 'csv', 'xml', 'json' ]
            allowed_mime_types: [ 'application/pdf', 'application/x-pdf', 'application/rtf', 'text/html', 'text/rtf', 'text/plain' ]

        image:
            service: sonata.media.provider.image
            resizer: sonata.media.resizer.simple # sonata.media.resizer.square, sonata.media.resizer.crop
            filesystem: sonata.media.filesystem.local
            cdn: sonata.media.cdn.server
            generator: sonata.media.generator.default
            thumbnail: sonata.media.thumbnail.format
            allowed_extensions: [ 'jpg', 'png', 'jpeg', 'gif' ]
            allowed_mime_types: [ 'image/jpg', 'image/jpeg', 'image/png', 'image/x-png' ]

        youtube:
            service: sonata.media.provider.youtube
            resizer: sonata.media.resizer.simple
            filesystem: sonata.media.filesystem.local
            cdn: sonata.media.cdn.server
            generator: sonata.media.generator.default
            thumbnail: sonata.media.thumbnail.format
            html5: false

        dailymotion:
            service: sonata.media.provider.dailymotion
            resizer: sonata.media.resizer.simple
            filesystem: sonata.media.filesystem.local
            cdn: sonata.media.cdn.server
            generator: sonata.media.generator.default
            thumbnail: sonata.media.thumbnail.format

